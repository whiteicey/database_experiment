{"version":3,"file":"button.vue_vue_type_script_lang.mjs","sources":["../../../../../../packages/components/button/src/button.vue"],"sourcesContent":["<template>\n  <button\n    ref=\"buttonRef\"\n    :class=\"[\n      'el-button',\n      buttonType ? 'el-button--' + buttonType : '',\n      buttonSize ? 'el-button--' + buttonSize : '',\n      {\n        'is-disabled': buttonDisabled,\n        'is-loading': loading,\n        'is-plain': plain,\n        'is-round': round,\n        'is-circle': circle,\n      },\n    ]\"\n    :disabled=\"buttonDisabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <el-icon v-if=\"loading\" class=\"is-loading\">\n      <loading />\n    </el-icon>\n    <el-icon v-else-if=\"icon\">\n      <component :is=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ 'el-button__text--expand': shouldAddSpace }\"\n    >\n      <slot></slot>\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, inject, defineComponent, Text, ref } from 'vue'\nimport { useCssVar } from '@vueuse/core'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useFormItem, useGlobalConfig } from '@element-plus/hooks'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { Loading } from '@element-plus/icons'\n\nimport { lighten, darken } from '@element-plus/utils/color'\n\nimport { buttonEmits, buttonProps } from './button'\n\nexport default defineComponent({\n  name: 'ElButton',\n\n  components: {\n    ElIcon,\n    Loading,\n  },\n\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(props, { emit, slots }) {\n    const buttonRef = ref()\n    const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n    const globalConfig = useGlobalConfig()\n    const autoInsertSpace = computed(() => {\n      return props.autoInsertSpace ?? globalConfig?.button.autoInsertSpace\n    })\n\n    // add space between two characters in Chinese\n    const shouldAddSpace = computed(() => {\n      const defaultSlot = slots.default?.()\n      if (autoInsertSpace.value && defaultSlot?.length === 1) {\n        const slot = defaultSlot[0]\n        if (slot?.type === Text) {\n          const text = slot.children\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text as string)\n        }\n      }\n      return false\n    })\n\n    const {\n      form,\n      size: buttonSize,\n      disabled: buttonDisabled,\n    } = useFormItem({\n      size: computed(() => buttonGroupContext?.size),\n    })\n    const buttonType = computed(\n      () => props.type || buttonGroupContext?.type || 'default'\n    )\n\n    // calculate hover & active color by color\n    const typeColor = useCssVar(`--el-color-${props.type}`)\n    const buttonStyle = computed(() => {\n      let styles = {}\n\n      const buttonColor = props.color || typeColor.value\n\n      if (buttonColor) {\n        const darkenBgColor = darken(buttonColor, 0.1)\n        if (props.plain) {\n          styles = {\n            '--el-button-bg-color': lighten(buttonColor, 0.9),\n            '--el-button-text-color': buttonColor,\n            '--el-button-hover-text-color': 'var(--el-color-white)',\n            '--el-button-hover-bg-color': buttonColor,\n            '--el-button-hover-border-color': buttonColor,\n            '--el-button-active-bg-color': darkenBgColor,\n            '--el-button-active-text-color': 'var(--el-color-white)',\n            '--el-button-active-border-color': darkenBgColor,\n          }\n        } else {\n          const lightenBgColor = lighten(buttonColor)\n          styles = {\n            '--el-button-bg-color': buttonColor,\n            '--el-button-border-color': buttonColor,\n            '--el-button-hover-bg-color': lightenBgColor,\n            '--el-button-hover-border-color': lightenBgColor,\n            '--el-button-active-bg-color': darkenBgColor,\n            '--el-button-active-border-color': darkenBgColor,\n          }\n        }\n\n        if (buttonDisabled.value) {\n          const disabledButtonColor = lighten(buttonColor, 0.5)\n          styles['--el-button-disabled-bg-color'] = disabledButtonColor\n          styles['--el-button-disabled-border-color'] = disabledButtonColor\n        }\n      }\n\n      return styles\n    })\n\n    const handleClick = (evt: MouseEvent) => {\n      if (props.nativeType === 'reset') {\n        form?.resetFields()\n      }\n      emit('click', evt)\n    }\n\n    return {\n      buttonRef,\n      buttonStyle,\n\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n\n      shouldAddSpace,\n\n      handleClick,\n    }\n  },\n})\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;AAgDA,aAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EAEN,YAAY;AAAA,IACV;AAAA,IACA;AAAA;AAAA,EAGF,OAAO;AAAA,EACP,OAAO;AAAA,EAEP,MAAM,OAAO,EAAE,MAAM,SAAS;AAC5B,UAAM,YAAY;AAClB,UAAM,qBAAqB,OAAO,uBAAuB;AACzD,UAAM,eAAe;AACrB,UAAM,kBAAkB,SAAS,MAAM;;AACrC,aAAO,YAAM,oBAAN,YAAyB,6CAAc,OAAO;AAAA;AAIvD,UAAM,iBAAiB,SAAS,MAAM;;AACpC,YAAM,cAAc,YAAM,YAAN;AACpB,UAAI,gBAAgB,SAAS,4CAAa,YAAW,GAAG;AACtD,cAAM,OAAO,YAAY;AACzB,YAAI,8BAAM,UAAS,MAAM;AACvB,gBAAM,OAAO,KAAK;AAClB,iBAAO,8BAA8B,KAAK;AAAA;AAAA;AAG9C,aAAO;AAAA;AAGT,UAAM;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,MACN,UAAU;AAAA,QACR,YAAY;AAAA,MACd,MAAM,SAAS,MAAM,yDAAoB;AAAA;AAE3C,UAAM,aAAa,SACjB,MAAM,MAAM,kEAA4B,SAAQ;AAIlD,UAAM,YAAY,UAAU,cAAc,MAAM;AAChD,UAAM,cAAc,SAAS,MAAM;AACjC,UAAI,SAAS;AAEb,YAAM,cAAc,MAAM,SAAS,UAAU;AAE7C,UAAI,aAAa;AACf,cAAM,gBAAgB,OAAO,aAAa;AAC1C,YAAI,MAAM,OAAO;AACf,mBAAS;AAAA,YACP,wBAAwB,QAAQ,aAAa;AAAA,YAC7C,0BAA0B;AAAA,YAC1B,gCAAgC;AAAA,YAChC,8BAA8B;AAAA,YAC9B,kCAAkC;AAAA,YAClC,+BAA+B;AAAA,YAC/B,iCAAiC;AAAA,YACjC,mCAAmC;AAAA;AAAA,eAEhC;AACL,gBAAM,iBAAiB,QAAQ;AAC/B,mBAAS;AAAA,YACP,wBAAwB;AAAA,YACxB,4BAA4B;AAAA,YAC5B,8BAA8B;AAAA,YAC9B,kCAAkC;AAAA,YAClC,+BAA+B;AAAA,YAC/B,mCAAmC;AAAA;AAAA;AAIvC,YAAI,eAAe,OAAO;AACxB,gBAAM,sBAAsB,QAAQ,aAAa;AACjD,iBAAO,mCAAmC;AAC1C,iBAAO,uCAAuC;AAAA;AAAA;AAIlD,aAAO;AAAA;AAGT,UAAM,cAAc,CAAC,QAAoB;AACvC,UAAI,MAAM,eAAe,SAAS;AAChC,qCAAM;AAAA;AAER,WAAK,SAAS;AAAA;AAGhB,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MAEA;AAAA;AAAA;AAAA;;;;"}